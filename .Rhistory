ls()
revs <- readRDS("revs.rds")
saveRDS(revs, file = "revsculledprepped.rds")
revs <- readRDS("revsculledprepped.rds")
dim(revs)
head(revs)
revsall <- readRDS("revsall.rds")
expdata <- readRDS("revsallwordfreqs.rds")
expdata$ave.polarity = (expdata$ave.polarity * expdata$total.sentences) / expdata$total.words
expdata[is.na(expdata)] <- 0
cullcols = c(9:11, 16:19, 28:32, 33:37, 51:52, 54:60, 63, 65:66, 68:71)
expdata = expdata[ , -cullcols]
startcol <- 40
relativediffs <- rep(NA, length(startcol:dim(expdata)[2]))
relativediffs <- cbind.data.frame(relativediffs, relativediffs)
for (varcol in startcol:dim(expdata)[2]) {
reldiffsrow <- varcol - (startcol - 1)
conmedcol <- expdata[expdata$medicine == "conventional", varcol]
altmedcol <- expdata[expdata$medicine == "alternative", varcol]
relativediffs[reldiffsrow, 1] <- mean(conmedcol)
relativediffs[reldiffsrow, 2] <- mean(altmedcol)
}
nwordscol <- which(colnames(expdata) == "n.words")
medicinecol <- which(colnames(expdata) == "medicine")
# word frequencies for each word
wordfreqs <- expdata[ , 40:dim(expdata)[2]] * expdata[ , nwordscol]
# word frequencies for each word for reviews of conventional medicine
conmedwordfreqs <- wordfreqs[expdata[ , medicinecol] == "conventional", ]
# word frequencies for each word for reviews of alternative medicine
altmedwordfreqs <- wordfreqs[expdata[ , medicinecol] == "alternative", ]
# ratio of number of conventional medicine to alternative medicine reviews
contoaltratio <- table(expdata$medicine)[[2]] / table(expdata$medicine)[[1]]
# difference in word usage rate as proportion of conventional medicine rate
relativediffs[ , 3] <- (abs(relativediffs[ , 1] - relativediffs[ , 2]) / relativediffs[ , 1])
relativediffs[ , 4] <- colSums(wordfreqs)
relativediffs[ , 5] <- colSums(conmedwordfreqs)
relativediffs[ , 6] <- colSums(altmedwordfreqs)
relativediffs[ , 7] <- relativediffs[ , 5] + (relativediffs[ , 6] * contoaltratio)
# index of how well word's usage rate may discriminate between conventional and
# alternative medicine reviews; accounts for difference in word's usage rates
# between conventional and alternative medicine and how frequently word is used
relativediffs[ , 8] <- relativediffs[ , 3] * relativediffs[ , 4]
# same index as above, but word frequencies for alternative medicine reviews
# have been overweighted to equal frequencies for conventional medicine review
# this should optimize word selection for training data, which will likewise
# overweight alternative medicine reviews
relativediffs[ , 9] <- relativediffs[ , 3] * relativediffs[ , 8]
relativediffs[ , 10] <- startcol:dim(expdata)[2]
colnames(relativediffs) <- c("conmedmean", "altmedmean", "reldiff", "totalfreq", "confreq",
"altfreq", "totalwfreq", "diffxfreq", "diffxwfreq", "colindex")
rownames(relativediffs) <- colnames(expdata)[startcol:dim(expdata)[2]]
rownames(relativediffs) <- gsub(".1", "", rownames(relativediffs))
# plot relative differences to determine which words might be best discriminators
sortreldiffs <- relativediffs[order(relativediffs[ , 3], decreasing = TRUE), ]
sortdifffreq <- relativediffs[order(relativediffs[ , 8], decreasing = TRUE), ]
sortdiffwfreq <- relativediffs[order(relativediffs[ , 9], decreasing = TRUE), ]
var1 = levels(expdata$medicine)
var2 = sort(unique(expdata$stars))
testrows = NA
set.seed(43317)
for (iter1 in 1:length(var1)) {
for (iter2 in 1:length(var2)) {
set = which(expdata$medicine == var1[iter1] & expdata$stars == var2[iter2])
sampledrows = sample(set, size = round(0.4 * length(set)), replace = FALSE)
testrows = append(testrows, sampledrows)
}
}
testrows = testrows[-1]
traindata = expdata[-testrows, ]
testdata = expdata[testrows, ]
starsbymed = cbind(as.data.frame(table(traindata[traindata$medicine == "conventional", ]$stars)),
as.data.frame(table(traindata[traindata$medicine == "alternative", ]$stars)))
starsbymed = starsbymed[ , -c(1, 3)]
colnames(starsbymed) = c("conventional", "alternative")
var = sort(unique(expdata$stars))
overrows = NA
set.seed(17830)
for (iter in 1:length(var)) {
set = which(traindata$medicine == "alternative" & traindata$stars == iter)
sampledrows = sample(set, size = starsbymed$conventional[iter], replace = TRUE)
overrows = append(overrows, sampledrows)
}
overrows = overrows[-1]
overtraindata = rbind(traindata[traindata$medicine == "conventional", ],
traindata[overrows, ])
wordfreqnums <- 80       # number of word frequency variables for inclusion
# column indices for data to be included in analysis
# columns 4 - 39 are Yelp data and the standard analyses from the package 'qdap'
# the remaining columns are word usage rates
# the number of words are selected inclusion are specified in 'wordfreqnums'
# words are included based on the difference in usage rates between reviews
# for conventional or alternative medicine multipled by word frequency that
# has been weighted so that reviews for alternative medicine count equally as
# those for conventional medicine
# indices skip '1' and run from 2 to 'wordfreqnums + 1' to avoid 'reflexology',
# which did not appear in conventional medicine reviews; since the difference
# was divided by the word usage rate in conventional medicine reviews, the
# difference for 'reflexology' is listed as 'infinity', which is not useful
diffwfreqcols <- c(4:39, sortdiffwfreq$colindex[2:wordfreqnums + 1])
rpartmodelover = train(medicine ~ ., method = "rpart", data = overtraindata[ , diffwfreqcols])
predrpartover = predict(rpartmodelover, testdata[ , diffwfreqcols])
library(caret)
rpartmodelover = train(medicine ~ ., method = "rpart", data = overtraindata[ , diffwfreqcols])
predrpartover = predict(rpartmodelover, testdata[ , diffwfreqcols])
medcol = 4
plotdata = traindata
plotdata = expdata
starsbymed = cbind(as.data.frame(table(plotdata[plotdata$medicine == "conventional", ]$stars)),
as.data.frame(table(plotdata[plotdata$medicine == "alternative", ]$stars)))
starsbymed = starsbymed[ , -c(1, 3)]
starsmedprop = starsbymed
starsmedprop[ , 1] = starsmedprop[ , 1] / sum(starsmedprop[ , 1])
starsmedprop[ , 2] = starsmedprop[ , 2] / sum(starsmedprop[ , 2])
colnames(starsmedprop) = c("conventional", "alternative")
ls()
rpartmodelover$finalModel
confusionMatrix(predrpartover, testdata$medicine)
